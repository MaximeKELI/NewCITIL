#!/bin/bash

echo "üß™ TEST DE LA FONCTIONNALIT√â PHOTO DE PROFIL"
echo "============================================="
echo ""

# Couleurs
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo "1Ô∏è‚É£ Test de connexion et r√©cup√©ration des donn√©es utilisateur..."
echo ""

# Test de connexion
echo "üìù Connexion avec un utilisateur de test..."
LOGIN_RESPONSE=$(curl -s -X POST http://localhost:8000/api/login \
  -H "Content-Type: application/json" \
  -H "Accept: application/json" \
  -d '{
    "email": "admin@citil.tg",
    "password": "password"
  }')

echo "R√©ponse de connexion:"
echo "$LOGIN_RESPONSE" | head -5
echo ""

# Extraire le token
TOKEN=$(echo "$LOGIN_RESPONSE" | grep -o '"token":"[^"]*"' | cut -d'"' -f4)

if [ -z "$TOKEN" ]; then
    echo -e "‚ùå ${RED}√âchec de la connexion${NC}"
    echo "Cr√©ons un utilisateur de test..."
    
    REGISTER_RESPONSE=$(curl -s -X POST http://localhost:8000/api/register \
      -H "Content-Type: application/json" \
      -H "Accept: application/json" \
      -d '{
        "name": "Test User",
        "email": "test@example.com",
        "password": "password123",
        "password_confirmation": "password123"
      }')
    
    echo "R√©ponse d'inscription:"
    echo "$REGISTER_RESPONSE" | head -5
    echo ""
    
    TOKEN=$(echo "$REGISTER_RESPONSE" | grep -o '"token":"[^"]*"' | cut -d'"' -f4)
fi

if [ -z "$TOKEN" ]; then
    echo -e "‚ùå ${RED}Impossible d'obtenir un token${NC}"
    exit 1
fi

echo -e "‚úÖ ${GREEN}Token obtenu: ${TOKEN:0:20}...${NC}"
echo ""

# Test de r√©cup√©ration des donn√©es utilisateur
echo "2Ô∏è‚É£ Test de r√©cup√©ration des donn√©es utilisateur..."
echo ""

USER_INFO_RESPONSE=$(curl -s -X GET http://localhost:8000/api/get-user \
  -H "Authorization: Bearer $TOKEN" \
  -H "Accept: application/json")

echo "R√©ponse get-user:"
echo "$USER_INFO_RESPONSE"
echo ""

# V√©rifier si l'avatar est pr√©sent dans la r√©ponse
if echo "$USER_INFO_RESPONSE" | grep -q '"avatar"'; then
    echo -e "‚úÖ ${GREEN}Champ avatar pr√©sent dans la r√©ponse${NC}"
else
    echo -e "‚ùå ${RED}Champ avatar manquant dans la r√©ponse${NC}"
fi

echo ""
echo "3Ô∏è‚É£ Test de mise √† jour du profil..."
echo ""

# Cr√©er un fichier de test pour l'avatar
echo "üì∏ Cr√©ation d'un fichier image de test..."
echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==" | base64 -d > /tmp/test_avatar.png

# Test de mise √† jour avec avatar
UPDATE_RESPONSE=$(curl -s -X PUT http://localhost:8000/api/profile \
  -H "Authorization: Bearer $TOKEN" \
  -H "Accept: application/json" \
  -F "name=Test User Updated" \
  -F "avatar=@/tmp/test_avatar.png")

echo "R√©ponse de mise √† jour:"
echo "$UPDATE_RESPONSE"
echo ""

# V√©rifier si l'avatar a √©t√© mis √† jour
if echo "$UPDATE_RESPONSE" | grep -q '"avatar"'; then
    echo -e "‚úÖ ${GREEN}Avatar mis √† jour avec succ√®s${NC}"
    
    # Extraire l'URL de l'avatar
    AVATAR_URL=$(echo "$UPDATE_RESPONSE" | grep -o '"avatar":"[^"]*"' | cut -d'"' -f4)
    echo "URL de l'avatar: $AVATAR_URL"
    
    # Tester l'acc√®s √† l'avatar
    echo ""
    echo "4Ô∏è‚É£ Test d'acc√®s √† l'avatar..."
    echo ""
    
    AVATAR_TEST=$(curl -s -I "http://localhost:8000$AVATAR_URL")
    if echo "$AVATAR_TEST" | grep -q "200 OK"; then
        echo -e "‚úÖ ${GREEN}Avatar accessible via URL${NC}"
    else
        echo -e "‚ùå ${RED}Avatar non accessible${NC}"
        echo "R√©ponse: $AVATAR_TEST"
    fi
else
    echo -e "‚ùå ${RED}√âchec de la mise √† jour de l'avatar${NC}"
fi

echo ""
echo "5Ô∏è‚É£ Test de r√©cup√©ration des donn√©es apr√®s mise √† jour..."
echo ""

# R√©cup√©rer les donn√©es utilisateur apr√®s mise √† jour
UPDATED_USER_INFO=$(curl -s -X GET http://localhost:8000/api/get-user \
  -H "Authorization: Bearer $TOKEN" \
  -H "Accept: application/json")

echo "Donn√©es utilisateur apr√®s mise √† jour:"
echo "$UPDATED_USER_INFO"
echo ""

# Nettoyer le fichier de test
rm -f /tmp/test_avatar.png

echo "üéØ R√âSUM√â DU TEST:"
echo "=================="
echo ""

if echo "$UPDATED_USER_INFO" | grep -q '"avatar"'; then
    echo -e "‚úÖ ${GREEN}SUCC√àS: La fonctionnalit√© photo de profil fonctionne correctement${NC}"
    echo "‚úÖ Upload d'avatar: OK"
    echo "‚úÖ Stockage d'avatar: OK"
    echo "‚úÖ R√©cup√©ration d'avatar: OK"
    echo "‚úÖ URL d'avatar: OK"
else
    echo -e "‚ùå ${RED}√âCHEC: Probl√®me avec la fonctionnalit√© photo de profil${NC}"
    echo "‚ùå V√©rifiez les logs du serveur Laravel"
    echo "‚ùå V√©rifiez la configuration du stockage"
fi

echo ""
echo "üîß DIAGNOSTIC:"
echo "=============="
echo ""

# V√©rifier les permissions du dossier de stockage
if [ -d "/home/maxime/PLATEFORME-CITIL/citil-backend/storage/app/public/avatars" ]; then
    echo -e "‚úÖ ${GREEN}Dossier avatars existe${NC}"
    ls -la /home/maxime/PLATEFORME-CITIL/citil-backend/storage/app/public/avatars/
else
    echo -e "‚ùå ${RED}Dossier avatars manquant${NC}"
fi

echo ""

# V√©rifier le lien symbolique
if [ -L "/home/maxime/PLATEFORME-CITIL/citil-backend/public/storage" ]; then
    echo -e "‚úÖ ${GREEN}Lien symbolique public/storage existe${NC}"
else
    echo -e "‚ùå ${RED}Lien symbolique public/storage manquant${NC}"
fi

echo ""
echo -e "${YELLOW}‚ú® Test termin√© !${NC}"
